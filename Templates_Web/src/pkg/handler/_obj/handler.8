go object darwin 386 
  exports automatically generated from
  src/pkg/handler/handler.go in package "handler"

$$  // exports
    package handler
	import runtime "runtime"
	import templates "templates"
	import http "http"
	func "".initÂ·1 ()
	type "http".ResponseWriter interface { Header() "http".Header; Write(? []uint8) (? int, ? "os".Error); WriteHeader(? int) }
	import os "os" // indirect
	type "os".Error interface { String() string }
	import io "io" // indirect
	type "io".Writer interface { Write(p []uint8) (n int, err "os".Error) }
	type "http".Header map[string] []string
	func (h "http".Header) Add (key string, value string)
	func (h "http".Header) Del (key string)
	func (h "http".Header) Get (key string) string
	func (h "http".Header) Set (key string, value string)
	func (h "http".Header) Write (w "io".Writer) "os".Error
	func (h "http".Header) WriteSubset (w "io".Writer, exclude map[string] bool) "os".Error
	import multipart "mime/multipart" // indirect
	type "mime/multipart".File interface { Close() "os".Error; Read(p []uint8) (n int, err "os".Error); ReadAt(p []uint8, off int64) (n int, err "os".Error); Seek(offset int64, whence int) (ret int64, err "os".Error) }
	type "mime/multipart".FileHeader struct { Filename string; Header "net/textproto".MIMEHeader; content []uint8; tmpfile string }
	func (fh *"mime/multipart".FileHeader) Open () (? "mime/multipart".File, ? "os".Error)
	import textproto "net/textproto" // indirect
	type "net/textproto".MIMEHeader map[string] []string
	func (h "net/textproto".MIMEHeader) Add (key string, value string)
	func (h "net/textproto".MIMEHeader) Del (key string)
	func (h "net/textproto".MIMEHeader) Get (key string) string
	func (h "net/textproto".MIMEHeader) Set (key string, value string)
	type "mime/multipart".Reader interface { NextPart() (? *"mime/multipart".Part, ? "os".Error); ReadForm(maxMemory int64) (? *"mime/multipart".Form, ? "os".Error) }
	type "mime/multipart".Part struct { Header "net/textproto".MIMEHeader; buffer *"bytes".Buffer; mr *"mime/multipart".multiReader; disposition string; dispositionParams map[string] string }
	func (bp *"mime/multipart".Part) Close () "os".Error
	func (p *"mime/multipart".Part) FileName () string
	func (p *"mime/multipart".Part) FormName () string
	func (bp *"mime/multipart".Part) Read (p []uint8) (n int, err "os".Error)
	func (p *"mime/multipart".Part) parseContentDisposition ()
	func (bp *"mime/multipart".Part) populateHeaders () "os".Error
	import bytes "bytes" // indirect
	type "io".Reader interface { Read(p []uint8) (n int, err "os".Error) }
	type "bytes".Buffer struct { buf []uint8; off int; runeBytes [4]uint8; bootstrap [64]uint8; lastRead "bytes".readOp }
	func (b *"bytes".Buffer) Bytes () []uint8
	func (b *"bytes".Buffer) Len () int
	func (b *"bytes".Buffer) Next (n int) []uint8
	func (b *"bytes".Buffer) Read (p []uint8) (n int, err "os".Error)
	func (b *"bytes".Buffer) ReadByte () (c uint8, err "os".Error)
	func (b *"bytes".Buffer) ReadBytes (delim uint8) (line []uint8, err "os".Error)
	func (b *"bytes".Buffer) ReadFrom (r "io".Reader) (n int64, err "os".Error)
	func (b *"bytes".Buffer) ReadRune () (r int, size int, err "os".Error)
	func (b *"bytes".Buffer) ReadString (delim uint8) (line string, err "os".Error)
	func (b *"bytes".Buffer) Reset ()
	func (b *"bytes".Buffer) String () string
	func (b *"bytes".Buffer) Truncate (n int)
	func (b *"bytes".Buffer) UnreadByte () "os".Error
	func (b *"bytes".Buffer) UnreadRune () "os".Error
	func (b *"bytes".Buffer) Write (p []uint8) (n int, err "os".Error)
	func (b *"bytes".Buffer) WriteByte (c uint8) "os".Error
	func (b *"bytes".Buffer) WriteRune (r int) (n int, err "os".Error)
	func (b *"bytes".Buffer) WriteString (s string) (n int, err "os".Error)
	func (b *"bytes".Buffer) WriteTo (w "io".Writer) (n int64, err "os".Error)
	func (b *"bytes".Buffer) grow (n int) int
	type "bytes".readOp int
	type "mime/multipart".Form struct { Value map[string] []string; File map[string] []*"mime/multipart".FileHeader }
	func (f *"mime/multipart".Form) RemoveAll () "os".Error
	type "mime/multipart".multiReader struct { bufReader *"bufio".Reader; currentPart *"mime/multipart".Part; partsRead int; nlDashBoundary []uint8; dashBoundaryDash []uint8; dashBoundary []uint8 }
	func (mr *"mime/multipart".multiReader) NextPart () (? *"mime/multipart".Part, ? "os".Error)
	func (r *"mime/multipart".multiReader) ReadForm (maxMemory int64) (f *"mime/multipart".Form, err "os".Error)
	func (mr *"mime/multipart".multiReader) isBoundaryDelimiterLine (line []uint8) bool
	import bufio "bufio" // indirect
	type "bufio".Reader struct { buf []uint8; rd "io".Reader; r int; w int; err "os".Error; lastByte int; lastRuneSize int }
	func (b *"bufio".Reader) Buffered () int
	func (b *"bufio".Reader) Peek (n int) (? []uint8, ? "os".Error)
	func (b *"bufio".Reader) Read (p []uint8) (n int, err "os".Error)
	func (b *"bufio".Reader) ReadByte () (c uint8, err "os".Error)
	func (b *"bufio".Reader) ReadBytes (delim uint8) (line []uint8, err "os".Error)
	func (b *"bufio".Reader) ReadLine () (line []uint8, isPrefix bool, err "os".Error)
	func (b *"bufio".Reader) ReadRune () (rune int, size int, err "os".Error)
	func (b *"bufio".Reader) ReadSlice (delim uint8) (line []uint8, err "os".Error)
	func (b *"bufio".Reader) ReadString (delim uint8) (line string, err "os".Error)
	func (b *"bufio".Reader) UnreadByte () "os".Error
	func (b *"bufio".Reader) UnreadRune () "os".Error
	func (b *"bufio".Reader) fill ()
	type "http".Request struct { Method string; RawURL string; URL *"http".URL; Proto string; ProtoMajor int; ProtoMinor int; Header "http".Header; Cookie []*"http".Cookie; Body "io".ReadCloser; ContentLength int64; TransferEncoding []string; Close bool; Host string; Referer string; UserAgent string; Form "http".Values; MultipartForm *"mime/multipart".Form; Trailer "http".Header; RemoteAddr string; TLS *"crypto/tls".ConnectionState }
	func (r *"http".Request) FormFile (key string) (? "mime/multipart".File, ? *"mime/multipart".FileHeader, ? "os".Error)
	func (r *"http".Request) FormValue (key string) string
	func (r *"http".Request) MultipartReader () (? "mime/multipart".Reader, ? "os".Error)
	func (r *"http".Request) ParseForm () "os".Error
	func (r *"http".Request) ParseMultipartForm (maxMemory int64) "os".Error
	func (r *"http".Request) ProtoAtLeast (major int, minor int) bool
	func (r *"http".Request) SetBasicAuth (username string, password string)
	func (req *"http".Request) Write (w "io".Writer) "os".Error
	func (req *"http".Request) WriteProxy (w "io".Writer) "os".Error
	func (r *"http".Request) expectsContinue () bool
	func (r *"http".Request) multipartReader () (? "mime/multipart".Reader, ? "os".Error)
	func (r *"http".Request) wantsHttp10KeepAlive () bool
	func (req *"http".Request) write (w "io".Writer, usingProxy bool) "os".Error
	type "http".Values map[string] []string
	func (v "http".Values) Add (key string, value string)
	func (v "http".Values) Del (key string)
	func (v "http".Values) Encode () string
	func (v "http".Values) Get (key string) string
	func (v "http".Values) Set (key string, value string)
	type "http".URL struct { Raw string; Scheme string; RawAuthority string; RawUserinfo string; Host string; RawPath string; Path string; OpaquePath bool; RawQuery string; Fragment string }
	func (url *"http".URL) IsAbs () bool
	func (base *"http".URL) ParseURL (ref string) (? *"http".URL, ? "os".Error)
	func (u *"http".URL) Query () "http".Values
	func (base *"http".URL) ResolveReference (ref *"http".URL) *"http".URL
	func (url *"http".URL) String () string
	type "http".Cookie struct { Name string; Value string; Path string; Domain string; Expires "time".Time; RawExpires string; MaxAge int; Secure bool; HttpOnly bool; Raw string; Unparsed []string }
	import time "time" // indirect
	type "time".Time struct { Year int64; Month int; Day int; Hour int; Minute int; Second int; Weekday int; ZoneOffset int; Zone string }
	func (t *"time".Time) Format (layout string) string
	func (t *"time".Time) Seconds () int64
	func (t *"time".Time) String () string
	type "io".ReadCloser interface { Close() "os".Error; Read(p []uint8) (n int, err "os".Error) }
	import tls "crypto/tls" // indirect
	type "crypto/tls".ConnectionState struct { HandshakeComplete bool; CipherSuite uint16; NegotiatedProtocol string; NegotiatedProtocolIsMutual bool; PeerCertificates []*"crypto/x509".Certificate; VerifiedChains [][]*"crypto/x509".Certificate }
	import x509 "crypto/x509" // indirect
	import pkix "crypto/x509/pkix" // indirect
	type "crypto/x509/pkix".CertificateList struct { TBSCertList "crypto/x509/pkix".TBSCertificateList; SignatureAlgorithm "crypto/x509/pkix".AlgorithmIdentifier; SignatureValue "asn1".BitString }
	func (certList *"crypto/x509/pkix".CertificateList) HasExpired (currentTimeSeconds int64) bool
	type "crypto/x509/pkix".TBSCertificateList struct { Raw "asn1".RawContent; Version int :"optional,default:2"; Signature "crypto/x509/pkix".AlgorithmIdentifier; Issuer "crypto/x509/pkix".RDNSequence; ThisUpdate *"time".Time; NextUpdate *"time".Time; RevokedCertificates []"crypto/x509/pkix".RevokedCertificate :"optional"; Extensions []"crypto/x509/pkix".Extension :"tag:0,optional,explicit" }
	import asn1 "asn1" // indirect
	type "asn1".RawContent []uint8
	type "crypto/x509/pkix".AlgorithmIdentifier struct { Algorithm "asn1".ObjectIdentifier; Parameters "asn1".RawValue :"optional" }
	type "asn1".ObjectIdentifier []int
	func (oi "asn1".ObjectIdentifier) Equal (other "asn1".ObjectIdentifier) bool
	type "asn1".RawValue struct { Class int; Tag int; IsCompound bool; Bytes []uint8; FullBytes []uint8 }
	type "crypto/x509/pkix".RDNSequence []"crypto/x509/pkix".RelativeDistinguishedNameSET
	type "crypto/x509/pkix".RelativeDistinguishedNameSET []"crypto/x509/pkix".AttributeTypeAndValue
	type "crypto/x509/pkix".AttributeTypeAndValue struct { Type "asn1".ObjectIdentifier; Value interface { } }
	type "crypto/x509/pkix".RevokedCertificate struct { SerialNumber *"big".Int; RevocationTime *"time".Time; Extensions []"crypto/x509/pkix".Extension :"optional" }
	import big "big" // indirect
	import fmt "fmt" // indirect
	type "fmt".State interface { Flag(c int) bool; Precision() (prec int, ok bool); Width() (wid int, ok bool); Write(b []uint8) (ret int, err "os".Error) }
	import rand "rand" // indirect
	type "rand".Rand struct { src "rand".Source }
	func (r *"rand".Rand) ExpFloat64 () float64
	func (r *"rand".Rand) Float32 () float32
	func (r *"rand".Rand) Float64 () float64
	func (r *"rand".Rand) Int () int
	func (r *"rand".Rand) Int31 () int32
	func (r *"rand".Rand) Int31n (n int32) int32
	func (r *"rand".Rand) Int63 () int64
	func (r *"rand".Rand) Int63n (n int64) int64
	func (r *"rand".Rand) Intn (n int) int
	func (r *"rand".Rand) NormFloat64 () float64
	func (r *"rand".Rand) Perm (n int) []int
	func (r *"rand".Rand) Seed (seed int64)
	func (r *"rand".Rand) Uint32 () uint32
	type "rand".Source interface { Int63() int64; Seed(seed int64) }
	type "fmt".ScanState interface { Read(buf []uint8) (n int, err "os".Error); ReadRune() (rune int, size int, err "os".Error); Token(skipSpace bool, f func(? int) bool) (token []uint8, err "os".Error); UnreadRune() "os".Error; Width() (wid int, ok bool) }
	type "io".RuneScanner interface { ReadRune() (rune int, size int, err "os".Error); UnreadRune() "os".Error }
	type "big".Int struct { neg bool; abs "big".nat }
	func (z *"big".Int) Abs (x *"big".Int) *"big".Int
	func (z *"big".Int) Add (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) And (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) AndNot (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) Binomial (n int64, k int64) *"big".Int
	func (z *"big".Int) Bit (i int) uint
	func (z *"big".Int) BitLen () int
	func (z *"big".Int) Bytes () []uint8
	func (x *"big".Int) Cmp (y *"big".Int) int
	func (z *"big".Int) Div (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) DivMod (x *"big".Int, y *"big".Int, m *"big".Int) (? *"big".Int, ? *"big".Int)
	func (z *"big".Int) Exp (x *"big".Int, y *"big".Int, m *"big".Int) *"big".Int
	func (x *"big".Int) Format (s "fmt".State, ch int)
	func (z *"big".Int) GobDecode (buf []uint8) "os".Error
	func (z *"big".Int) GobEncode () (? []uint8, ? "os".Error)
	func (x *"big".Int) Int64 () int64
	func (z *"big".Int) Lsh (x *"big".Int, n uint) *"big".Int
	func (z *"big".Int) Mod (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) ModInverse (g *"big".Int, p *"big".Int) *"big".Int
	func (z *"big".Int) Mul (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) MulRange (a int64, b int64) *"big".Int
	func (z *"big".Int) Neg (x *"big".Int) *"big".Int
	func (z *"big".Int) Not (x *"big".Int) *"big".Int
	func (z *"big".Int) Or (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) Quo (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) QuoRem (x *"big".Int, y *"big".Int, r *"big".Int) (? *"big".Int, ? *"big".Int)
	func (z *"big".Int) Rand (rnd *"rand".Rand, n *"big".Int) *"big".Int
	func (z *"big".Int) Rem (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) Rsh (x *"big".Int, n uint) *"big".Int
	func (z *"big".Int) Scan (s "fmt".ScanState, ch int) "os".Error
	func (z *"big".Int) Set (x *"big".Int) *"big".Int
	func (z *"big".Int) SetBit (x *"big".Int, i int, b uint) *"big".Int
	func (z *"big".Int) SetBytes (buf []uint8) *"big".Int
	func (z *"big".Int) SetInt64 (x int64) *"big".Int
	func (z *"big".Int) SetString (s string, base int) (? *"big".Int, ? bool)
	func (x *"big".Int) Sign () int
	func (x *"big".Int) String () string
	func (z *"big".Int) Sub (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) Xor (x *"big".Int, y *"big".Int) *"big".Int
	func (z *"big".Int) scan (r "io".RuneScanner, base int) (? *"big".Int, ? int, ? "os".Error)
	type "big".Word uintptr
	type "big".nat []"big".Word
	func (z "big".nat) add (x "big".nat, y "big".nat) "big".nat
	func (z "big".nat) and (x "big".nat, y "big".nat) "big".nat
	func (z "big".nat) andNot (x "big".nat, y "big".nat) "big".nat
	func (z "big".nat) bit (i uint) uint
	func (x "big".nat) bitLen () int
	func (z "big".nat) bytes (buf []uint8) int
	func (z "big".nat) clear ()
	func (x "big".nat) cmp (y "big".nat) int
	func (x "big".nat) decimalString () string
	func (z "big".nat) div (z2 "big".nat, u "big".nat, v "big".nat) (q "big".nat, r "big".nat)
	func (z "big".nat) divLarge (u "big".nat, uIn "big".nat, v "big".nat) (q "big".nat, r "big".nat)
	func (z "big".nat) divW (x "big".nat, y "big".Word) (q "big".nat, r "big".Word)
	func (z "big".nat) expNN (x "big".nat, y "big".nat, m "big".nat) "big".nat
	func (z "big".nat) make (n int) "big".nat
	func (x "big".nat) modW (d "big".Word) "big".Word
	func (z "big".nat) mul (x "big".nat, y "big".nat) "big".nat
	func (z "big".nat) mulAddWW (x "big".nat, y "big".Word, r "big".Word) "big".nat
	func (z "big".nat) mulRange (a uint64, b uint64) "big".nat
	func (z "big".nat) norm () "big".nat
	func (z "big".nat) or (x "big".nat, y "big".nat) "big".nat
	func (x "big".nat) powersOfTwoDecompose () (q "big".nat, k int)
	func (n "big".nat) probablyPrime (reps int) bool
	func (z "big".nat) random (rand *"rand".Rand, limit "big".nat, n int) "big".nat
	func (z "big".nat) scan (r "io".RuneScanner, base int) (? "big".nat, ? int, ? "os".Error)
	func (z "big".nat) set (x "big".nat) "big".nat
	func (z "big".nat) setBit (x "big".nat, i uint, b uint) "big".nat
	func (z "big".nat) setBytes (buf []uint8) "big".nat
	func (z "big".nat) setUint64 (x uint64) "big".nat
	func (z "big".nat) setWord (x "big".Word) "big".nat
	func (z "big".nat) shl (x "big".nat, s uint) "big".nat
	func (z "big".nat) shr (x "big".nat, s uint) "big".nat
	func (x "big".nat) string (charset string) string
	func (z "big".nat) sub (x "big".nat, y "big".nat) "big".nat
	func (z "big".nat) xor (x "big".nat, y "big".nat) "big".nat
	type "crypto/x509/pkix".Extension struct { Id "asn1".ObjectIdentifier; Critical bool :"optional"; Value []uint8 }
	type "asn1".BitString struct { Bytes []uint8; BitLength int }
	func (b "asn1".BitString) At (i int) int
	func (b "asn1".BitString) RightAlign () []uint8
	type "crypto/x509".SignatureAlgorithm int
	import rsa "crypto/rsa" // indirect
	type "crypto/rsa".PrivateKey struct { ? "crypto/rsa".PublicKey; D *"big".Int; Primes []*"big".Int; Precomputed "crypto/rsa".PrecomputedValues }
	func (priv *"crypto/rsa".PrivateKey) Precompute ()
	func (priv *"crypto/rsa".PrivateKey) Validate () "os".Error
	type "crypto/rsa".PublicKey struct { N *"big".Int; E int }
	type "crypto/rsa".PrecomputedValues struct { Dp *"big".Int; Dq *"big".Int; Qinv *"big".Int; CRTValues []"crypto/rsa".CRTValue }
	type "crypto/rsa".CRTValue struct { Exp *"big".Int; Coeff *"big".Int; R *"big".Int }
	type "crypto/x509".VerifyOptions struct { DNSName string; Intermediates *"crypto/x509".CertPool; Roots *"crypto/x509".CertPool; CurrentTime int64 }
	type "crypto/x509".CertPool struct { bySubjectKeyId map[string] []int; byName map[string] []int; certs []*"crypto/x509".Certificate }
	func (s *"crypto/x509".CertPool) AddCert (cert *"crypto/x509".Certificate)
	func (s *"crypto/x509".CertPool) AppendCertsFromPEM (pemCerts []uint8) bool
	func (s *"crypto/x509".CertPool) findVerifiedParents (cert *"crypto/x509".Certificate) []int
	type "crypto/x509".Certificate struct { Raw []uint8; RawTBSCertificate []uint8; RawSubjectPublicKeyInfo []uint8; Signature []uint8; SignatureAlgorithm "crypto/x509".SignatureAlgorithm; PublicKeyAlgorithm "crypto/x509".PublicKeyAlgorithm; PublicKey interface { }; Version int; SerialNumber *"big".Int; Issuer "crypto/x509/pkix".Name; Subject "crypto/x509/pkix".Name; NotBefore *"time".Time; NotAfter *"time".Time; KeyUsage "crypto/x509".KeyUsage; ExtKeyUsage []"crypto/x509".ExtKeyUsage; UnknownExtKeyUsage []"asn1".ObjectIdentifier; BasicConstraintsValid bool; IsCA bool; MaxPathLen int; SubjectKeyId []uint8; AuthorityKeyId []uint8; DNSNames []string; EmailAddresses []string; PermittedDNSDomainsCritical bool; PermittedDNSDomains []string; PolicyIdentifiers []"asn1".ObjectIdentifier }
	func (c *"crypto/x509".Certificate) CheckCRLSignature (crl *"crypto/x509/pkix".CertificateList) "os".Error
	func (c *"crypto/x509".Certificate) CheckSignature (algo "crypto/x509".SignatureAlgorithm, signed []uint8, signature []uint8) "os".Error
	func (c *"crypto/x509".Certificate) CheckSignatureFrom (parent *"crypto/x509".Certificate) "os".Error
	func (c *"crypto/x509".Certificate) CreateCRL (rand "io".Reader, priv *"crypto/rsa".PrivateKey, revokedCerts []"crypto/x509/pkix".RevokedCertificate, now *"time".Time, expiry *"time".Time) (crlBytes []uint8, err "os".Error)
	func (c *"crypto/x509".Certificate) Equal (other *"crypto/x509".Certificate) bool
	func (c *"crypto/x509".Certificate) Verify (opts "crypto/x509".VerifyOptions) (chains [][]*"crypto/x509".Certificate, err "os".Error)
	func (c *"crypto/x509".Certificate) VerifyHostname (h string) "os".Error
	func (c *"crypto/x509".Certificate) buildChains (cache map[int] [][]*"crypto/x509".Certificate, currentChain []*"crypto/x509".Certificate, opts *"crypto/x509".VerifyOptions) (chains [][]*"crypto/x509".Certificate, err "os".Error)
	func (c *"crypto/x509".Certificate) isValid (certType int, opts *"crypto/x509".VerifyOptions) "os".Error
	type "crypto/x509".PublicKeyAlgorithm int
	type "crypto/x509/pkix".Name struct { Country []string; Organization []string; OrganizationalUnit []string; Locality []string; Province []string; StreetAddress []string; PostalCode []string; SerialNumber string; CommonName string }
	func (n *"crypto/x509/pkix".Name) FillFromRDNSequence (rdns *"crypto/x509/pkix".RDNSequence)
	func (n "crypto/x509/pkix".Name) ToRDNSequence () "crypto/x509/pkix".RDNSequence
	type "crypto/x509".KeyUsage int
	type "crypto/x509".ExtKeyUsage int
	func "".handler (wr "http".ResponseWriter, r *"http".Request)
	type "templates".Context struct { ? *"templates".Writer; Context *"appengine".Context; Request *"http".Request }
	type "templates".Writer struct { Output "http".ResponseWriter; Buffer string; Templates []string; IsRoot bool }
	func (w *"templates".Writer) RegisterTemplate (name string)
	func (w *"templates".Writer) Send ()
	func (w *"templates".Writer) sendFragment ()
	func (w *"templates".Writer) sendPage ()
	import appengine "appengine" // indirect
	type "appengine".Context interface { AppID() string; Call(service string, method string, in interface { }, out interface { }) "os".Error; Criticalf(format string, args ...interface { }); Debugf(format string, args ...interface { }); Errorf(format string, args ...interface { }); FullyQualifiedAppID() string; Infof(format string, args ...interface { }); Request() interface { }; Warningf(format string, args ...interface { }) }
	type "templates".Template struct { name string; Html string; Id string; parentId string; Writer *"templates".Writer }
	func (t *"templates".Template) FullId () string
	func (t *"templates".Template) GetParentId () string
	func (t *"templates".Template) GetTemplateJavascript () string
	type "templates".Item struct { id string; template *"templates".Template; writer *"templates".Writer; Value string }
	func (i *"templates".Item) Append (o ...interface { })
	func (i *"templates".Item) Attr (attrib string, o interface { })
	func (i *"templates".Item) Click (handlerFunc interface { }, values interface { })
	func (i *"templates".Item) Css (attrib string, o interface { })
	func (i *"templates".Item) FullId () string
	func (i *"templates".Item) Html (o ...interface { })
	func (i *"templates".Item) attrCss (command string, attrib string, o interface { })
	func (i *"templates".Item) attrCssGeneric (command string, attrib string, val string)
	func (i *"templates".Item) generic (replace bool, o []interface { })
	func (i *"templates".Item) htmlGeneric (replace bool, s string)
	func (i *"templates".Item) templateGeneric (replace bool, t *"templates".Template)
	type "".MyClickNew_T struct { Val1 "templates".Value; Span1 *"templates".Item; Img1 *"templates".Item; Text1 *"templates".Item }
	type "templates".Value string
	type "".MyClick_T struct { Span1 *"templates".Item; Text1 *"templates".Item; Img1 *"templates".Item }
	type "".MyClickFoo_T struct { Span1 *"templates".Item; Text1 *"templates".Item }
	type "".Functions int
	func (f "".Functions) MyClick (c "templates".Context, v "".MyClick_T)
	func (f "".Functions) MyClickFoo (c "templates".Context, v "".MyClickFoo_T)
	func (f "".Functions) MyClickNew (c "templates".Context, v "".MyClickNew_T)
	func (f "".Functions) Root (c "templates".Context, root *"templates".Item)
	var "".initdoneÂ· uint8
	func "".init ()

$$  // local types

$$

!
~ E</ ~ E<Users ~ E<d.brophy ~ E<Projects ~ E<Templates ~ E<Templates_Web ~ E<src ~ E<pkg ~ E<handler ~ E<handler.go 7      ~ E<http.a 7     ÿÿÿÿA~ E<templates.a 7     ÿÿÿÿA7 `     ~ ="".initÂ·1 ~ =type.func() Ü    =   A~ =go.string."/" a 	   =~ Shttp.pattern a 	   S! 	     y 	     y 	     ~ ="".handler ~ =type.func(http.ResponseWriter, *http.Request) p 	   = D~ Shttp.handler p 	      S~ =http.HandleFunc ~ =	type.func(string, func(http.ResponseWriter, *http.Request))  	    =	£ 
     Ü    =E      Ap    AS~ =
""._func_001 ~ =type.func(uintptr) interface { } p    = 
Dp       S~ =runtime.closure ~ =type.func(int, func(uintptr) interface { }) func() interface { }      =p       S~ Stemplates.getFunctionsType p       S~ @"".wr ~ =type.http.ResponseWriter a    @~ Stemplates.wr a    S!      y      y      ~ @"".r ~ =type.*http.Request p       @~ Stemplates.r p       S~ =templates.Server ~ =type.func(http.ResponseWriter, *http.Request, func() interface { })      =£      ~ ="".FunctionsÂ·Root ~ =type.method(f "".Functions)func(templates.Context, *templates.Item) Ü    =Et      A~ @"".c ~ =type.templates.Context a       @p    R~ Stemplates.w p    S~ =go.string."main" a    =~ Stemplates.id a       S!      y      y      ~ =templates.Test ~ =type.func(*templates.Writer, string) *templates.Test_T      =p       S~ ? "".test ~ =!type.*templates.Test_T p    ¬ÿÿÿ ?!p       AS~ ="runtime.new ~ =#type.func(int32) *[1]interface { }      "=#p       S~ ?$"".autotmp_0004 p       AÐÿÿÿ$?p       AÔÿÿÿ$?p    Ìÿÿÿ$?~ =%type.uint8 ~ S&runtime.typ p    = !D%&Sp    ¬ÿÿÿ ?!~ S'runtime.elem p       'S~ =(runtime.convT2E ~ =)type.func(*uint8, *templates.Test_T) interface { }      (=)a       Sp    a    Ìÿÿÿ$?p    R!      y      y      ~ @*"".root ~ =+type.*templates.Item p       *@+~ S,templates.i p    ,Sa    Ìÿÿÿ$?~ S-templates.o a       -S!      y      y      y      ~ =.templates.*ItemÂ·Html      .=p       AS     "=#p       S~ ?/"".autotmp_0006 p       AÄÿÿÿ/?p       AÈÿÿÿ/?p    Àÿÿÿ/?~ =0type.string p    = 0D%&S~ =1go.string."Hello world!" a    1=a       'S!      y      y      ~ =type.func(*uint8, string) interface { }      (=a       Sp    a    Àÿÿÿ/?p    R!      y      y      p    ¬ÿÿÿ ?!	       Ap    Op    ,Sa    Àÿÿÿ/?a       -S!      y      y      y           .=p    = 0D%&S~ =go.string."foo" a    =a       'S!      y      y           (=a       Sp    a       -S!      y      y      p    ¬ÿÿÿ ?!	       Ap    Op    ,S~ =go.string."value" a    =~ Stemplates.attrib a       S!      y      y      ~ =templates.*ItemÂ·Attr      =a       @p    Rp    S~ =go.string."dave" a    =a       S!      y      y      ~ =templates.Inner ~ =type.func(*templates.Writer, string) *templates.Inner_T      =p       S~ ?	"".inner ~ =
type.*templates.Inner_T p    ¼ÿÿÿ	?
p        AS      "=#p        S~ ?"".autotmp_0008 p        A´ÿÿÿ?p        A¸ÿÿÿ?p     °ÿÿÿ?p     = 
D%&Sp     ¼ÿÿÿ	?
p        'S~ =type.func(*uint8, *templates.Inner_T) interface { }       (=a        Sp     a     °ÿÿÿ?p     R!       y       y       p     ¬ÿÿÿ ?!	        Ap     Op     ,Sa     °ÿÿÿ?a        -S!       y       y       y             .=p "      AS "    "=#p "      S~ ?"".autotmp_0010 p "      Aðÿÿÿ?p "      Aôÿÿÿ?p "   ìÿÿÿ?p "   = 0D%&S~ =go.string."BAR" a "   =a "      'S! "     y "     y "      "    (=a "      Sp "   a "   ìÿÿÿ?p "   R! "     y "     y "     p "   ¼ÿÿÿ	?
	 "      Ap "   Op "   ,Sa "   ìÿÿÿ?a "      -S! "     y "     y "     y "      "    .=p #   = 0D%&S~ =go.string."http://pix-eu.dontstayin.com/53812cd7-33c7-44ac-a766-9710e4f14077.jpg" a #   =a #      'S! #     y #     y #      #    (=a #      Sp #   a #      -S! #     y #     y #     p #   ¼ÿÿÿ	?
	 #      Ap #   Op #   ,S~ =go.string."src" a #   =a #      S! #     y #     y #      #    =~ =type.int p $   = D%&Sp $   d   A   'S~ =type.func(*uint8, int) interface { }  $    (=a $      Sp $   p $   a $      -SÐ $     	 $      A	 $      Ap $      A	¡ $     y $     ! $     p $   ¼ÿÿÿ	?
	 $      Ap $   Op $   ,S~ =go.string."width" a $   =a $      S! $     y $     y $      $    =p %   = D%&Sp %   d   A   'S %    (=a %      Sp %   p %   a %      -SÐ %     	 %      A	 %      Ap %      A	¡ %     y %     ! %     p %   ¼ÿÿÿ	?
	 %      Ap %   Op %   ,S~ =go.string."height" a %   =a %      S! %     y %     y %      %    =p %   ¼ÿÿÿ	?

~ ="".statictmp_0013 ~ =go.string."testing" - 0   ;==    D- 0   ;   =   Aa 0   =~ ?"".autotmp_0012 a 0   Øÿÿÿ?! 0     p 0      A	¡ 0     y 0     p 0   
	 0      Ap 0   Oa 0   Øÿÿÿ?p 0   	 0      Ap 0   Op 0   
	 0      Ap 0   Oa 0   Øÿÿÿ?p 0   	 0      Ap 0   Op 0   ¬ÿÿÿ ?!	 0      Ap 0   Oa 0   Øÿÿÿ?p 0   	 0      Ap 0   O~ =type.func("".Functions, templates.Context, "".MyClickNew_T) p 0   = D%&S~ ="".FunctionsÂ·MyClickNew p 0   = Dp 0      'S~ =type.func(*uint8, func("".Functions, templates.Context, "".MyClickNew_T)) interface { }  0    (=a 0      Sp 0   ~ ?"".autotmp_0014 a 0   øÿÿÿ?! 0     y 0     y 0     ~ =type."".MyClickNew_T p 0   = D%&Sa 0   Øÿÿÿ?a 0      'S! 0     p 0      A	¡ 0     y 0     ~ =type.func(*uint8, "".MyClickNew_T) interface { }  0    (=a 0      Sp 0   ~ Stemplates.values a 0      S! 0     y 0     y 0     p 0   ¼ÿÿÿ	?
	 0      Ap 0   Op 0   ,Sa 0   øÿÿÿ?~ Stemplates.handlerFunc a 0      S! 0     y 0     y 0     ~ = templates.*ItemÂ·Click  0     =~ @!"".c ~ ="type.templates.Context a 3      !@"p 3   R~ S#templates.w p 3   #S~ =$templates.*WriterÂ·Send  3    $=£ 4     ~ =%type.method(f "".Functions)func(templates.Context, "".MyClickNew_T) Ü =   =%E(   $   A~ =&type.uint8 ~ S'runtime.typ p ?   = 0D&'S~ =(go.string."10px solid #ff0000" a ?   (=~ S)runtime.elem a ?      )S! ?     y ?     y ?     ~ =*runtime.convT2E  ?    *=a ?      Sp ?   a ?      -S! ?     y ?     y ?     ~ @+"".v a ?      +@p ?   	 ?      Ap ?   Op ?   ,S~ =,go.string."border" a ?   ,=a ?      S! ?     y ?     y ?     ~ =-templates.*ItemÂ·Css  ?    -=p @      AS~ =.runtime.new ~ =/type.func(int32) *[1]interface { }  @    .=/p @      S~ ?0"".autotmp_0093 p @      Aøÿÿÿ0?p @      Aüÿÿÿ0?p @   ôÿÿÿ0?p @      AS~ =1go.string."WHOOOOOOPPPPPPPPP!!!!" a @   1=a @      S! @     y @     y @     a @      +@p @   a @      S! @     y @     y @     ~ =runtime.concatstring ~ =type.func(int, string, string) string  @    =a @      Sp @   a @      )S! @     y @     y @     ~ =type.templates.Value p @   = D&'S~ =type.func(*uint8, templates.Value) interface { }  @    *=a @      Sp @   a @   ôÿÿÿ0?p @   R! @     y @     y @     a @      +@p @   	 @      Ap @   O~ Stemplates.i p @   Sa @   ôÿÿÿ0?~ Stemplates.o a @      S! @     y @     y @     y @     ~ =templates.*ItemÂ·Html  @    =a B      !@"p B   Rp B   #S B    $=£ C     ~ ="".FunctionsÂ·MyClick ~ =	type.method(f "".Functions)func(templates.Context, "".MyClick_T) Ü K   =	E(      A~ =
type.string p M   = 
D&'Sa M   (=a M      )S! M     y M     y M     ~ =type.func(*uint8, string) interface { }  M    *=a M      Sp M   a M      S! M     y M     y M     ~ =type."".MyClick_T a M      +@p M   	 M      Ap M   Op M   Sa M   ,=~ Stemplates.attrib a M      S! M     y M     y M      M    -=p N      AS N    .=/p N      S~ ?"".autotmp_0115 p N      Aøÿÿÿ?p N      Aüÿÿÿ?p N   ôÿÿÿ?p N      AS~ =go.string."WHOOOOOOPPPPPPPPP!!!!! " a N   =a N      S! N     y N     y N     a N      +@p N   	 N      Ap N   O	 N      Aa N      S! N     y N     y N      N    =a N      Sp N   a N      )S! N     y N     y N     p N   = 
D&'S N    *=a N      Sp N   a N   ôÿÿÿ?p N   R! N     y N     y N     a N      +@p N   Rp N   Sa N   ôÿÿÿ?a N      S! N     y N     y N     y N      N    =a P      !@"p P   Rp P   #S P    $=£ Q     ~ ="".FunctionsÂ·MyClickFoo ~ =type.method(f "".Functions)func(templates.Context, "".MyClickFoo_T) Ü Y   =E(      Ap [      AS [    .=/p [      S~ ?"".autotmp_0138 p [      Aøÿÿÿ?p [      Aüÿÿÿ?p [   ôÿÿÿ?p [      AS~ =go.string."FOOOOOOOOOOO " a [   =a [      S! [     y [     y [     ~ =type."".MyClickFoo_T a [      +@p [   	 [      Ap [   O	 [      Aa [      S! [     y [     y [      [    =a [      Sp [   a [      )S! [     y [     y [     p [   = 
D&'S [    *=a [      Sp [   a [   ôÿÿÿ?p [   R! [     y [     y [     a [      +@p [   Rp [   Sa [   ôÿÿÿ?a [      S! [     y [     y [     y [      [    =a \      !@"p \   Rp \   #S \    $=£ ^     ~ ="".init ~ =type.func() Ü ^   =A~ ="".initdoneÂ· s ^   =&	W ^      <W ^    #  <% ^   	AO ^      <W ^      <W ^    !  <p ^   	% ^   	   AX ^      <£ ^     W ^    !  <~ =runtime.throwinit  ^    =W ^    #  <o ^      A=&~ =templates.init  ^    =~ =http.init  ^    =~ ="".initÂ·1  ^    =o ^      A=&£ ^     £ ^     ~ =""._func_001 ~ =type.func(uintptr) interface { } Ü    =E      A~ =type."".Functions p    = D&'Sp    A   )S~ =type.func(*uint8, "".Functions) interface { }      *=a       Sp    p    ~ @ ""..noname a        @!      y      y      £      ~ =!runtime.throwreturn      !=£      ~ =""".statictmp_0013 5 0   ;"=   A5 ^   =&   A~ =#type.*runtime.FuncType - ^   ;== #D- ^   ;   ==    D- ^   ;   =   A- ^   ;   =ö¼öA- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =$go.string."func()" - ^   ;   == $D~ =%weak.type.*func() - ^   ;   == %D- ^   ;    =A- ^   ;$   == <   D- ^   ;(   =A- ^   ;,   =A- ^   ;0   == <   D- ^   ;4   =A- ^   ;8   =A5 ^   ;
=<   A~ =&type.func(http.ResponseWriter, *http.Request) - ^   ;&== #D- ^   ;   &==    &D- ^   ;   &=   A- ^   ;   &=ôA- ^   ;   &=   A- ^   ;   &=   A- ^   ;   &=   A- ^   ;   &=   A~ ='go.string."func(http.ResponseWriter, *http.Request)" - ^   ;   &== 'D~ =(weak.type.*func(http.ResponseWriter, *http.Request) - ^   ;   &== (D- ^   ;    &=A- ^   ;$   &== <   &D- ^   ;(   &=   A- ^   ;,   &=   A- ^   ;0   &== D   &D- ^   ;4   &=A- ^   ;8   &=A~ =)type.http.ResponseWriter - ^   ;<   &== )D~ =*type.*http.Request - ^   ;@   &== *D5 ^   ;
&=D   A~ =+type.func(string, func(http.ResponseWriter, *http.Request)) - ^   ;+== #D- ^   ;   +==    +D- ^   ;   +=   A- ^   ;   +=úãA- ^   ;   +=   A- ^   ;   +=   A- ^   ;   +=   A- ^   ;   +=   A~ =,go.string."func(string, func(http.ResponseWriter, *http.Request))" - ^   ;   +== ,D~ =-weak.type.*func(string, func(http.ResponseWriter, *http.Request)) - ^   ;   +== -D- ^   ;    +=A- ^   ;$   +== <   +D- ^   ;(   +=   A- ^   ;,   +=   A- ^   ;0   +== D   +D- ^   ;4   +=A- ^   ;8   +=A- ^   ;<   +== 
D- ^   ;@   +== &D5 ^   ;
+=D   A~ =.type.interface { } ~ =/type.*runtime.InterfaceType - ^   ;.== /D- ^   ;   .==    .D- ^   ;   .=   A- ^   ;   .=ô¤BóA- ^   ;   .=   A- ^   ;   .=   A- ^   ;   .=   A- ^   ;   .=   A~ =0go.string."interface { }" - ^   ;   .== 0D~ =1weak.type.*interface { } - ^   ;   .== 1D- ^   ;    .== ,   .D- ^   ;$   .=A- ^   ;(   .=A5 ^   ;
.=,   A- ^   ;== #D- ^   ;   ==    D- ^   ;   =   A- ^   ;   =°s}=A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =go.string."func(uintptr) interface { }" - ^   ;   == D~ =weak.type.*func(uintptr) interface { } - ^   ;   == D- ^   ;    =A- ^   ;$   == <   D- ^   ;(   =   A- ^   ;,   =   A- ^   ;0   == @   D- ^   ;4   =   A- ^   ;8   =   A~ =type.uintptr - ^   ;<   == D- ^   ;@   == .D5 ^   ;
=D   A~ =type.func() interface { } - ^   ;== #D- ^   ;   ==    D- ^   ;   =   A- ^   ;   =,êGA- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =go.string."func() interface { }" - ^   ;   == D~ =weak.type.*func() interface { } - ^   ;   == D- ^   ;    =A- ^   ;$   == <   D- ^   ;(   =A- ^   ;,   =A- ^   ;0   == <   D- ^   ;4   =   A- ^   ;8   =   A- ^   ;<   == .D5 ^   ;
=@   A~ =type.func(int, func(uintptr) interface { }) func() interface { } - ^   ;== #D- ^   ;   ==    D- ^   ;   =   A- ^   ;   =ÉÄ_uA- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =go.string."func(int, func(uintptr) interface { }) func() interface { }" - ^   ;   == D~ =	weak.type.*func(int, func(uintptr) interface { }) func() interface { } - ^   ;   == 	D- ^   ;    =A- ^   ;$   == <   D- ^   ;(   =   A- ^   ;,   =   A- ^   ;0   == D   D- ^   ;4   =   A- ^   ;8   =   A~ =
type.int - ^   ;<   == 
D- ^   ;@   == D- ^   ;D   == D5 ^   ;
=H   A~ =type.func(http.ResponseWriter, *http.Request, func() interface { }) - ^   ;== #D- ^   ;   ==    D- ^   ;   =   A- ^   ;   = ÇA- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =go.string."func(http.ResponseWriter, *http.Request, func() interface { })" - ^   ;   == D~ =weak.type.*func(http.ResponseWriter, *http.Request, func() interface { }) - ^   ;   == D- ^   ;    =A- ^   ;$   == <   D- ^   ;(   =   A- ^   ;,   =   A- ^   ;0   == H   D- ^   ;4   =A- ^   ;8   =A- ^   ;<   == )D- ^   ;@   == *D- ^   ;D   == D5 ^   ;
=H   A~ =type.*"".Functions ~ =type.*runtime.PtrType - ^   ;== D- ^   ;   ==    D- ^   ;   =   A- ^   ;   =ç"IA- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A- ^   ;   =   A~ =go.string."*handler.Functions" - ^   ;   == D~ =weak.type.**"".Functions - ^   ;   == D- ^   ;    == D       ~ ="".*FunctionsÂ·Root ~ =type.func(*"".Functions, templates.Context, *templates.Item) Ü    =E      A~ @""..this p    @p    R~ S"".f p    S~ @"".c ~ =type.templates.Context a       @~ S"".c a       S!      y      y      y      ~ @"".root ~ =type.*templates.Item p       @~ S"".root p       S~ ="".FunctionsÂ·Root      =£      ~ ="".*FunctionsÂ·MyClickNew ~ =type.func(*"".Functions, templates.Context, "".MyClickNew_T) Ü    =E$   $   Ap    @p    Rp    S~ @"".c a       @~ S "".c a        S!      y      y      y      ~ @!"".v ~ ="type."".MyClickNew_T a       !@"~ S#"".v a       #S!      p       A	¡      y      ~ =$"".FunctionsÂ·MyClickNew      $=£      ~ =%"".*FunctionsÂ·MyClick ~ =&type.func(*"".Functions, templates.Context, "".MyClick_T) Ü    %=&E      Ap    @p    Rp    S~ @'"".c a       '@~ S("".c a       (S!      y      y      y      ~ @)"".v ~ =*type."".MyClick_T a       )@*~ S+"".v a       +S!      y      y      y      ~ =,"".FunctionsÂ·MyClick      ,=£      ~ =-"".*FunctionsÂ·MyClickFoo ~ =.type.func(*"".Functions, templates.Context, "".MyClickFoo_T) Ü    -=.E      Ap    @p    Rp    S~ @/"".c a       /@~ S0"".c a       0S!      y      y      y      ~ @1"".v ~ =type."".MyClickFoo_T a       1@~ S"".v a       S!      y      y      ~ ="".FunctionsÂ·MyClickFoo      =£      -    ;   == $   D~ =type.*"".MyClick_T -    ;== D-    ;   ==    D-    ;   =   A-    ;   =¡ÇA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."*handler.MyClick_T" -    ;   == D~ =weak.type.**"".MyClick_T -    ;   == D-    ;    == *D5    ;=$   A~ =type.*runtime.StructType -    ;*== D-    ;   *==    *D-    ;   *=   A-    ;   *=¶ ÙFA-    ;   *=   A-    ;   *=   A-    ;   *=   A-    ;   *=   A~ =go.string."handler.MyClick_T" -    ;   *== D-    ;   *== D-    ;    *== ,   *D-    ;$   *=   A-    ;(   *=   A~ =	go.string."Span1" -    ;,   *== 	D-    ;0   *=A-    ;4   *== D-    ;8   *=A-    ;<   *=A~ =
go.string."Text1" -    ;@   *== 
D-    ;D   *=A-    ;H   *== D-    ;L   *=A-    ;P   *=   A~ =go.string."Img1" -    ;T   *== D-    ;X   *=A-    ;\   *== D-    ;`   *=A-    ;d   *=   A-    ;   *== h   *D~ =go.string."MyClick_T" -    ;h   *== D~ =go.importpath."". -    ;l   *== D-    ;p   *== |   *D-    ;t   *=A-    ;x   *=A5    ;*=|   A~ =type.*runtime.FuncType -    ;&== D-    ;   &==    &D-    ;   &=   A-    ;   &=#öOA-    ;   &=   A-    ;   &=   A-    ;   &=   A-    ;   &=   A~ =go.string."func(*handler.Functions, templates.Context, handler.MyClick_T)" -    ;   &== D~ =weak.type.*func(*"".Functions, templates.Context, "".MyClick_T) -    ;   &== D-    ;    &=A-    ;$   &== <   &D-    ;(   &=   A-    ;,   &=   A-    ;0   &== H   &D-    ;4   &=A-    ;8   &=A~ =type.*"".Functions -    ;<   &== D-    ;@   &== D-    ;D   &== *D5    ;
&=H   A~ =type.*"".MyClickFoo_T ~ =type.*runtime.PtrType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =&¸A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."*handler.MyClickFoo_T" -    ;   == D~ =weak.type.**"".MyClickFoo_T -    ;   == D-    ;    == D5    ;=$   A-    ;== D-    ;   ==    D-    ;   =   A-    ;   =§SA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."handler.MyClickFoo_T" -    ;   == D-    ;   == D-    ;    == ,   D-    ;$   =   A-    ;(   =   A-    ;,   == 	D-    ;0   =A-    ;4   == D-    ;8   =A-    ;<   =A-    ;@   == 
D-    ;D   =A-    ;H   == D-    ;L   =A-    ;P   =   A-    ;   == T   D~ =go.string."MyClickFoo_T" -    ;T   == D-    ;X   == D-    ;\   == h   D-    ;`   =A-    ;d   =A5    ;=h   A-    ;.== D-    ;   .==    .D-    ;   .=   A-    ;   .=*µzA-    ;   .=   A-    ;   .=   A-    ;   .=   A-    ;   .=   A~ =go.string."func(*handler.Functions, templates.Context, handler.MyClickFoo_T)" -    ;   .== D~ =weak.type.*func(*"".Functions, templates.Context, "".MyClickFoo_T) -    ;   .== D-    ;    .=A-    ;$   .== <   .D-    ;(   .=   A-    ;,   .=   A-    ;0   .== H   .D-    ;4   .=A-    ;8   .=A-    ;<   .== D~ =type.templates.Context -    ;@   .== D-    ;D   .== D5    ;
.=H   A~ =type.*"".MyClickNew_T -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ÄA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."*handler.MyClickNew_T" -    ;   == D~ =weak.type.**"".MyClickNew_T -    ;   == D-    ;    == "D5    ;=$   A-    ;"== D-    ;   "==    "D-    ;   "=   A-    ;   "=hpØA-    ;   "=   A-    ;   "=   A-    ;   "=   A-    ;   "=   A~ =go.string."handler.MyClickNew_T" -    ;   "== D-    ;   "== D-    ;    "== ,   "D-    ;$   "=   A-    ;(   "=   A~ =go.string."Val1" -    ;,   "== D-    ;0   "=A~ = type.templates.Value -    ;4   "==  D-    ;8   "=A-    ;<   "=A-    ;@   "== 	D-    ;D   "=A~ =!type.*templates.Item -    ;H   "== !D-    ;L   "=A-    ;P   "=   A-    ;T   "== D-    ;X   "=A-    ;\   "== !D-    ;`   "=A-    ;d   "=   A-    ;h   "== 
D-    ;l   "=A-    ;p   "== !D-    ;t   "=A-    ;x   "=   A-    ;   "== |   "D~ ="go.string."MyClickNew_T" ~ =#type."".MyClickNew_T -    ;|   #== "D-    ;   #== D-    ;   #==    #D-    ;   #=A-    ;   #=A5    ;#=   A~ =$type.func(*"".Functions, templates.Context, "".MyClickNew_T) -    ;$== D-    ;   $==    $D-    ;   $=   A-    ;   $="A-    ;   $=   A-    ;   $=   A-    ;   $=   A-    ;   $=   A~ =%go.string."func(*handler.Functions, templates.Context, handler.MyClickNew_T)" -    ;   $== %D~ =&weak.type.*func(*"".Functions, templates.Context, "".MyClickNew_T) -    ;   $== &D-    ;    $=A-    ;$   $== <   $D-    ;(   $=   A-    ;,   $=   A-    ;0   $== H   $D-    ;4   $=A-    ;8   $=A-    ;<   $== D-    ;@   $== D-    ;D   $== #D5    ;
$=H   A~ ='type.func(*"".Functions, templates.Context, *templates.Item) -    ;'== D-    ;   '==    'D-    ;   '=   A-    ;   '=Î8ÓA-    ;   '=   A-    ;   '=   A-    ;   '=   A-    ;   '=   A~ =(go.string."func(*handler.Functions, templates.Context, *templates.Item)" -    ;   '== (D~ =)weak.type.*func(*"".Functions, templates.Context, *templates.Item) -    ;   '== )D-    ;    '=A-    ;$   '== <   'D-    ;(   '=   A-    ;,   '=   A-    ;0   '== H   'D-    ;4   '=A-    ;8   '=A-    ;<   '== D-    ;@   '== D-    ;D   '== !D5    ;
'=H   A-    ;$   =A-    ;(   =A-    ;,   == 8   D-    ;0   =   A-    ;4   =   A~ =*go.string."MyClick" -    ;8   == *D-    ;<   =A~ =+type.func(templates.Context, "".MyClick_T) -    ;+== D-    ;   +==    +D-    ;   +=   A-    ;   +=á}9A-    ;   +=   A-    ;   +=   A-    ;   +=   A-    ;   +=   A~ =,go.string."func(templates.Context, handler.MyClick_T)" -    ;   +== ,D~ =-weak.type.*func(templates.Context, "".MyClick_T) -    ;   +== -D-    ;    +=A-    ;$   +== <   +D-    ;(   +=   A-    ;,   +=   A-    ;0   +== D   +D-    ;4   +=A-    ;8   +=A-    ;<   +== D~ =.type."".MyClick_T -    ;@   +== .D5    ;
+=D   A-    ;@   == +D~ =/type.func(*"".Functions, templates.Context, "".MyClick_T) -    ;D   == /D~ =0"".*FunctionsÂ·MyClick -    ;H   == 0D-    ;L   == 0D~ =1go.string."MyClickFoo" -    ;P   == 1D-    ;T   =A~ =type.func(templates.Context, "".MyClickFoo_T) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ÖÒ"A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(templates.Context, handler.MyClickFoo_T)" -    ;   == D~ =weak.type.*func(templates.Context, "".MyClickFoo_T) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =A-    ;8   =A-    ;<   == D~ =type."".MyClickFoo_T -    ;@   == D5    ;
=D   A-    ;X   == D~ =type.func(*"".Functions, templates.Context, "".MyClickFoo_T) -    ;\   == D~ ="".*FunctionsÂ·MyClickFoo -    ;`   == D-    ;d   == D~ =go.string."MyClickNew" -    ;h   == D-    ;l   =A~ =type.func(templates.Context, "".MyClickNew_T) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =$ï³A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =	go.string."func(templates.Context, handler.MyClickNew_T)" -    ;   == 	D~ =
weak.type.*func(templates.Context, "".MyClickNew_T) -    ;   == 
D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == #D5    ;
=D   A-    ;p   == D-    ;t   == $D~ ="".*FunctionsÂ·MyClickNew -    ;x   == D-    ;|   == D~ =go.string."Root" -    ;   == D-    ;   =A~ =type.func(templates.Context, *templates.Item) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =¶JA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(templates.Context, *templates.Item)" -    ;   == D~ =weak.type.*func(templates.Context, *templates.Item) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == !D5    ;
=D   A-    ;   == D-    ;   == 'D~ ="".*FunctionsÂ·Root -    ;   == D-    ;   == D5    ;=   A~ =type."".Functions ~ =type.*runtime.IntType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ÝT/tA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."handler.Functions" -    ;   == D~ =type.*"".Functions -    ;   == D-    ;   ==     D~ =type.func("".Functions, templates.Context, "".MyClick_T) ~ =type.*runtime.FuncType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =jéA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(handler.Functions, templates.Context, handler.MyClick_T)" -    ;   == D~ =weak.type.*func("".Functions, templates.Context, "".MyClick_T) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == D-    ;D   == .D5    ;
=H   A~ =type.func("".Functions, templates.Context, "".MyClickFoo_T) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ùß÷A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(handler.Functions, templates.Context, handler.MyClickFoo_T)" -    ;   == D~ =weak.type.*func("".Functions, templates.Context, "".MyClickFoo_T) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =A-    ;8   =A-    ;<   == D~ =type.templates.Context -    ;@   == D-    ;D   == D5    ;
=H   A~ =type.func("".Functions, templates.Context, *templates.Item) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =õ£A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(handler.Functions, templates.Context, *templates.Item)" -    ;   == D~ =weak.type.*func("".Functions, templates.Context, *templates.Item) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == D-    ;D   == !D5    ;
=H   A~ = go.string."Functions" -    ;    ==  D~ =!go.importpath."". -    ;$   == !D-    ;(   == 4   D-    ;,   =   A-    ;0   =   A-    ;4   == *D-    ;8   =A-    ;<   == +D-    ;@   == D~ =""".FunctionsÂ·MyClick -    ;D   == "D-    ;H   == "D-    ;L   == 1D-    ;P   =A-    ;T   == D-    ;X   == D~ =#"".FunctionsÂ·MyClickFoo -    ;\   == #D-    ;`   == #D-    ;d   == D-    ;h   =A-    ;l   == D~ =$type.func("".Functions, templates.Context, "".MyClickNew_T) -    ;p   == $D~ =%"".FunctionsÂ·MyClickNew -    ;t   == %D-    ;x   == %D-    ;|   == D-    ;   =A-    ;   == D-    ;   == D~ =&"".FunctionsÂ·Root -    ;   == &D-    ;   == &D5    ;=   A-    ;$== D-    ;   $==    $D-    ;   $=   A-    ;   $=¢@OA-    ;   $=   A-    ;   $=   A-    ;   $=   A-    ;   $=   A~ ='go.string."func(handler.Functions, templates.Context, handler.MyClickNew_T)" -    ;   $== 'D~ =(weak.type.*func("".Functions, templates.Context, "".MyClickNew_T) -    ;   $== (D-    ;    $=A-    ;$   $== <   $D-    ;(   $=   A-    ;,   $=   A-    ;0   $== H   $D-    ;4   $=A-    ;8   $=A-    ;<   $== D-    ;@   $== D~ =)type."".MyClickNew_T -    ;D   $== )D5    ;
$=H   A~ =*type.method(f "".Functions)func(templates.Context, *templates.Item) -    ;*== D-    ;   *==    *D-    ;   *=   A-    ;   *=¶JA-    ;   *=   A-    ;   *=   A-    ;   *=   A-    ;   *=   A~ =+go.string."method(f handler.Functions)func(templates.Context, *templates.Item)" -    ;   *== +D~ =,weak.type.*method(f "".Functions)func(templates.Context, *templates.Item) -    ;   *== ,D-    ;    *=A-    ;$   *== <   *D-    ;(   *=   A-    ;,   *=   A-    ;0   *== H   *D-    ;4   *=A-    ;8   *=A-    ;<   *== D-    ;@   *== D~ =-type.*templates.Item -    ;D   *== -D5    ;
*=H   A~ =.type.func(*templates.Writer, string) *templates.Test_T -    ;.== D-    ;   .==    .D-    ;   .=   A-    ;   .=aeA-    ;   .=   A-    ;   .=   A-    ;   .=   A-    ;   .=   A~ =/go.string."func(*templates.Writer, string) *templates.Test_T" -    ;   .== /D~ =0weak.type.*func(*templates.Writer, string) *templates.Test_T -    ;   .== 0D-    ;    .=A-    ;$   .== <   .D-    ;(   .=   A-    ;,   .=   A-    ;0   .== D   .D-    ;4   .=   A-    ;8   .=   A~ =1type.*templates.Writer -    ;<   .== 1D~ =type.string -    ;@   .== D~ =type.*templates.Test_T -    ;D   .== D5    ;
.=H   A~ =type.[]interface { } ~ =type.*runtime.SliceType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =6ûýlA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."[]interface { }" -    ;   == D~ =weak.type.*[]interface { } -    ;   == D~ =type.interface { } -    ;    == D5    ;
=$   A~ =type.[1]interface { } ~ =	type.*runtime.ArrayType -    ;== 	D-    ;   ==    D-    ;   =   A-    ;   =ÝcÏçA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =
go.string."[1]interface { }" -    ;   == 
D~ =weak.type.*[1]interface { } -    ;   == D-    ;    == D-    ;$   == D-    ;(   =   A5    ;
=,   A~ =type.*[1]interface { } ~ =type.*runtime.PtrType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =VDÀ_A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."*[1]interface { }" -    ;   == D~ =weak.type.**[1]interface { } -    ;   == D-    ;    == D5    ;
=$   A~ =type.func(int32) *[1]interface { } -    ;== D-    ;   ==    D-    ;   =   A-    ;   =:A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(int32) *[1]interface { }" -    ;   == D~ =weak.type.*func(int32) *[1]interface { } -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == @   D-    ;4   =   A-    ;8   =   A~ =type.int32 -    ;<   == D-    ;@   == D5    ;
=D   A~ =type.func(*uint8, *templates.Test_T) interface { } -    ;== D-    ;   ==    D-    ;   =   A-    ;   =?¹ùA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(*uint8, *templates.Test_T) interface { }" -    ;   == D~ =weak.type.*func(*uint8, *templates.Test_T) interface { } -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =   A-    ;8   =   A~ =type.*uint8 -    ;<   == D-    ;@   == D-    ;D   == D5    ;
=H   A~ =type.func(*uint8, string) interface { } ~ =type.*runtime.FuncType -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ï¤)¤A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(*uint8, string) interface { }" -    ;   == D~ =weak.type.*func(*uint8, string) interface { } -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =   A-    ;8   =   A-    ;<   == D-    ;@   == D-    ;D   == D5    ;
=H   A~ =type.func(*templates.Writer, string) *templates.Inner_T -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ÒémA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(*templates.Writer, string) *templates.Inner_T" -    ;   == D~ =weak.type.*func(*templates.Writer, string) *templates.Inner_T -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =   A-    ;8   =   A-    ;<   == 1D-    ;@   == D~ =type.*templates.Inner_T -    ;D   == D5    ;
=H   A~ = type.func(*uint8, *templates.Inner_T) interface { } -    ; == D-    ;    ==     D-    ;    =   A-    ;    =6?A-    ;    =   A-    ;    =   A-    ;    =   A-    ;    =   A~ =!go.string."func(*uint8, *templates.Inner_T) interface { }" -    ;    == !D~ ="weak.type.*func(*uint8, *templates.Inner_T) interface { } -    ;    == "D-    ;     =A-    ;$    == <    D-    ;(    =   A-    ;,    =   A-    ;0    == D    D-    ;4    =   A-    ;8    =   A-    ;<    == D-    ;@    == D-    ;D    == D5    ;
 =H   A~ =#type.func(*uint8, int) interface { } -    ;#== D-    ;   #==    #D-    ;   #=   A-    ;   #=ßL±íA-    ;   #=   A-    ;   #=   A-    ;   #=   A-    ;   #=   A~ =$go.string."func(*uint8, int) interface { }" -    ;   #== $D~ =%weak.type.*func(*uint8, int) interface { } -    ;   #== %D-    ;    #=A-    ;$   #== <   #D-    ;(   #=   A-    ;,   #=   A-    ;0   #== D   #D-    ;4   #=   A-    ;8   #=   A-    ;<   #== D~ =&type.int -    ;@   #== &D-    ;D   #== D5    ;
#=H   A~ ='type.func(*uint8, func("".Functions, templates.Context, "".MyClickNew_T)) interface { } -    ;'== D-    ;   '==    'D-    ;   '=   A-    ;   '=`n½ÒA-    ;   '=   A-    ;   '=   A-    ;   '=   A-    ;   '=   A~ =(go.string."func(*uint8, func(handler.Functions, templates.Context, handler.MyClickNew_T)) interface { }" -    ;   '== (D~ =)weak.type.*func(*uint8, func("".Functions, templates.Context, "".MyClickNew_T)) interface { } -    ;   '== )D-    ;    '=A-    ;$   '== <   'D-    ;(   '=   A-    ;,   '=   A-    ;0   '== D   'D-    ;4   '=   A-    ;8   '=   A-    ;<   '== D~ =*type.func("".Functions, templates.Context, "".MyClickNew_T) -    ;@   '== *D-    ;D   '== D5    ;
'=H   A~ =+type.func(*uint8, "".MyClickNew_T) interface { } -    ;+== D-    ;   +==    +D-    ;   +=   A-    ;   +=|4^A-    ;   +=   A-    ;   +=   A-    ;   +=   A-    ;   +=   A~ =,go.string."func(*uint8, handler.MyClickNew_T) interface { }" -    ;   +== ,D~ =-weak.type.*func(*uint8, "".MyClickNew_T) interface { } -    ;   +== -D-    ;    +=A-    ;$   +== <   +D-    ;(   +=   A-    ;,   +=   A-    ;0   +== D   +D-    ;4   +=   A-    ;8   +=   A-    ;<   +== D~ =.type."".MyClickNew_T -    ;@   +== .D-    ;D   +== D5    ;
+=H   A~ =/type.method(f "".Functions)func(templates.Context, "".MyClickNew_T) -    ;/== D-    ;   /==    /D-    ;   /=   A-    ;   /=$ï³A-    ;   /=   A-    ;   /=   A-    ;   /=   A-    ;   /=   A~ =0go.string."method(f handler.Functions)func(templates.Context, handler.MyClickNew_T)" -    ;   /== 0D~ =1weak.type.*method(f "".Functions)func(templates.Context, "".MyClickNew_T) -    ;   /== 1D-    ;    /=A-    ;$   /== <   /D-    ;(   /=   A-    ;,   /=   A-    ;0   /== H   /D-    ;4   /=A-    ;8   /=A~ =type."".Functions -    ;<   /== D~ =type.templates.Context -    ;@   /== D-    ;D   /== .D5    ;
/=H   A~ =type.func(int, string, string) string -    ;== D-    ;   ==    D-    ;   =   A-    ;   =`ÅØA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(int, string, string) string" -    ;   == D~ =weak.type.*func(int, string, string) string -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =   A-    ;8   =   A-    ;<   == &D~ =type.string -    ;@   == D-    ;D   == D-    ;H   == D5    ;
=L   A~ =type.func(*uint8, templates.Value) interface { } -    ;== D-    ;   ==    D-    ;   =   A-    ;   =GãðA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(*uint8, templates.Value) interface { }" -    ;   == D~ =	weak.type.*func(*uint8, templates.Value) interface { } -    ;   == 	D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =   A-    ;8   =   A-    ;<   == D~ =
type.templates.Value -    ;@   == 
D~ =type.interface { } -    ;D   == D5    ;
=H   A~ =type.method(f "".Functions)func(templates.Context, "".MyClick_T) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =á}9A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."method(f handler.Functions)func(templates.Context, handler.MyClick_T)" -    ;   == D~ =weak.type.*method(f "".Functions)func(templates.Context, "".MyClick_T) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == D~ =type."".MyClick_T -    ;D   == D5    ;
=H   A~ =type.method(f "".Functions)func(templates.Context, "".MyClickFoo_T) -    ;== D-    ;   ==    D-    ;   =   A-    ;   =ÖÒ"A-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."method(f handler.Functions)func(templates.Context, handler.MyClickFoo_T)" -    ;   == D~ =weak.type.*method(f "".Functions)func(templates.Context, "".MyClickFoo_T) -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == H   D-    ;4   =A-    ;8   =A-    ;<   == D-    ;@   == D~ =type."".MyClickFoo_T -    ;D   == D5    ;
=H   A~ =type.func(*uint8, "".Functions) interface { } -    ;== D-    ;   ==    D-    ;   =   A-    ;   =¥5OA-    ;   =   A-    ;   =   A-    ;   =   A-    ;   =   A~ =go.string."func(*uint8, handler.Functions) interface { }" -    ;   == D~ =weak.type.*func(*uint8, "".Functions) interface { } -    ;   == D-    ;    =A-    ;$   == <   D-    ;(   =   A-    ;,   =   A-    ;0   == D   D-    ;4   =   A-    ;8   =   A-    ;<   == D-    ;@   == D-    ;D   == D5    ;
=H   A~ =go.importpath.runtime. ~ =go.string."runtime" -    ;==    D-    ;   =   A5    ;
=   A~ =go.importpath.templates. ~ =go.string."templates" -    ;==    D-    ;   =	   A5    ;
=   A~ =go.importpath.http. ~ =go.string."http" -    ;==    D-    ;   =   A5    ;
=   A~ =go.string."/" - 	   ;==    D- 	   ;   =   A- 	   ;   = /       - 	   ;	   =A5 	   ;
=   A~ =go.string."main" -    ;==    D-    ;   =   A-    ;   = main    -    ;   =A5    ;
=   A~ =go.string."Hello world!" -    ;==    D-    ;   =   A-    ;   = Hello wo-    ;   = rld!    -    ;   =A5    ;
=   A~ = go.string."foo" -    ; ==     D-    ;    =   A-    ;    = foo     -    ;    =A5    ;
 =   A~ =!go.string."value" -    ;!==    !D-    ;   !=   A-    ;   != value   -    ;   !=A5    ;
!=   A~ ="go.string."dave" -    ;"==    "D-    ;   "=   A-    ;   "= dave    -    ;   "=A5    ;
"=   A~ =#go.string."BAR" - "   ;#==    #D- "   ;   #=   A- "   ;   #= BAR     - "   ;   #=A5 "   ;
#=   A~ =$go.string."http://pix-eu.dontstayin.com/53812cd7-33c7-44ac-a766-9710e4f14077.jpg" - #   ;$==    $D- #   ;   $=E   A- #   ;   $= http://p- #   ;   $= ix-eu.do- #   ;   $= ntstayin- #   ;    $= .com/538- #   ;(   $= 12cd7-33- #   ;0   $= c7-44ac-- #   ;8   $= a766-971- #   ;@   $= 0e4f1407- #   ;H   $= 7.jpg   - #   ;M   $=A5 #   ;
$=P   A~ =%go.string."src" - #   ;%==    %D- #   ;   %=   A- #   ;   %= src     - #   ;   %=A5 #   ;
%=   A~ =&go.string."width" - $   ;&==    &D- $   ;   &=   A- $   ;   &= width   - $   ;   &=A5 $   ;
&=   A~ ='go.string."height" - %   ;'==    'D- %   ;   '=   A- %   ;   '= height  - %   ;   '=A5 %   ;
'=   A~ =(go.string."testing" - 0   ;(==    (D- 0   ;   (=   A- 0   ;   (= testing - 0   ;   (=A5 0   ;
(=   A~ =)go.string."10px solid #ff0000" - ?   ;)==    )D- ?   ;   )=   A- ?   ;   )= 10px sol- ?   ;   )= id #ff00- ?   ;   )= 00      - ?   ;   )=A5 ?   ;
)=   A~ =*go.string."border" - ?   ;*==    *D- ?   ;   *=   A- ?   ;   *= border  - ?   ;   *=A5 ?   ;
*=   A~ =+go.string."WHOOOOOOPPPPPPPPP!!!!" - @   ;+==    +D- @   ;   +=   A- @   ;   += WHOOOOOO- @   ;   += PPPPPPPP- @   ;   += P!!!!   - @   ;   +=A5 @   ;
+=    A~ =,go.string."WHOOOOOOPPPPPPPPP!!!!! " - N   ;,==    ,D- N   ;   ,=   A- N   ;   ,= WHOOOOOO- N   ;   ,= PPPPPPPP- N   ;   ,= P!!!!!  - N   ;   ,=A5 N   ;
,=    A~ =-go.string."FOOOOOOOOOOO " - [   ;-==    -D- [   ;   -=   A- [   ;   -= FOOOOOOO- [   ;   -= OOOO    - [   ;   -=A5 [   ;
-=   A~ =.go.string."func()" - ^   ;.==    .D- ^   ;   .=   A- ^   ;   .= func()  - ^   ;   .=A5 ^   ;
.=   A~ =/go.string."func(http.ResponseWriter, *http.Request)" - ^   ;/==    /D- ^   ;   /=(   A- ^   ;   /= func(htt- ^   ;   /= p.Respon- ^   ;   /= seWriter- ^   ;    /= , *http.- ^   ;(   /= Request)- ^   ;0   /=A5 ^   ;
/=4   A~ =0go.string."func(string, func(http.ResponseWriter, *http.Request))" - ^   ;0==    0D- ^   ;   0=6   A- ^   ;   0= func(str- ^   ;   0= ing, fun- ^   ;   0= c(http.R- ^   ;    0= esponseW- ^   ;(   0= riter, *- ^   ;0   0= http.Req- ^   ;8   0= uest))  - ^   ;>   0=A5 ^   ;
0=@   A~ =1go.string."interface { }" - ^   ;1==    1D- ^   ;   1=   A- ^   ;   1= interfac- ^   ;   1= e { }   - ^   ;   1=A5 ^   ;
1=   A~ =go.string."func(uintptr) interface { }" - ^   ;==    D- ^   ;   =   A- ^   ;   = func(uin- ^   ;   = tptr) in- ^   ;   = terface - ^   ;    = { }     - ^   ;#   =A5 ^   ;
=$   A~ =go.string."func() interface { }" - ^   ;==    D- ^   ;   =   A- ^   ;   = func() i- ^   ;   = nterface- ^   ;   =  { }    - ^   ;   =A5 ^   ;
=    A~ =go.string."func(int, func(uintptr) interface { }) func() interface { }" - ^   ;==    D- ^   ;   =;   A- ^   ;   = func(int- ^   ;   = , func(u- ^   ;   = intptr) - ^   ;    = interfac- ^   ;(   = e { }) f- ^   ;0   = unc() in- ^   ;8   = terface - ^   ;@   = { }     - ^   ;C   =A5 ^   ;
=D   A~ =go.string."func(http.ResponseWriter, *http.Request, func() interface { })" - ^   ;==    D- ^   ;   =>   A- ^   ;   = func(htt- ^   ;   = p.Respon- ^   ;   = seWriter- ^   ;    = , *http.- ^   ;(   = Request,- ^   ;0   =  func() - ^   ;8   = interfac- ^   ;@   = e { })  - ^   ;F   =A5 ^   ;
=H   A~ =go.string."*handler.Functions" - ^   ;==    D- ^   ;   =   A- ^   ;   = *handler- ^   ;   = .Functio- ^   ;   = ns      - ^   ;   =A5 ^   ;
=   A~ =go.string."*handler.MyClick_T" -    ;==    D-    ;   =   A-    ;   = *handler-    ;   = .MyClick-    ;   = _T      -    ;   =A5    ;
=   A~ =go.string."handler.MyClick_T" -    ;==    D-    ;   =   A-    ;   = handler.-    ;   = MyClick_-    ;   = T       -    ;   =A5    ;
=   A~ =go.string."Span1" -    ;==    D-    ;   =   A-    ;   = Span1   -    ;   =A5    ;
=   A~ =	go.string."Text1" -    ;	==    	D-    ;   	=   A-    ;   	= Text1   -    ;   	=A5    ;
	=   A~ =
go.string."Img1" -    ;
==    
D-    ;   
=   A-    ;   
= Img1    -    ;   
=A5    ;

=   A~ =go.string."MyClick_T" -    ;==    D-    ;   =	   A-    ;   = MyClick_-    ;   = T       -    ;   =A5    ;
=   A~ =go.string."func(*handler.Functions, templates.Context, handler.MyClick_T)" -    ;==    D-    ;   =>   A-    ;   = func(*ha-    ;   = ndler.Fu-    ;   = nctions,-    ;    =  templat-    ;(   = es.Conte-    ;0   = xt, hand-    ;8   = ler.MyCl-    ;@   = ick_T)  -    ;F   =A5    ;
=H   A~ =go.string."*handler.MyClickFoo_T" -    ;==    D-    ;   =   A-    ;   = *handler-    ;   = .MyClick-    ;   = Foo_T   -    ;   =A5    ;
=    A~ =go.string."handler.MyClickFoo_T" -    ;==    D-    ;   =   A-    ;   = handler.-    ;   = MyClickF-    ;   = oo_T    -    ;   =A5    ;
=    A~ =go.string."MyClickFoo_T" -    ;==    D-    ;   =   A-    ;   = MyClickF-    ;   = oo_T    -    ;   =A5    ;
=   A~ =go.string."func(*handler.Functions, templates.Context, handler.MyClickFoo_T)" -    ;==    D-    ;   =A   A-    ;   = func(*ha-    ;   = ndler.Fu-    ;   = nctions,-    ;    =  templat-    ;(   = es.Conte-    ;0   = xt, hand-    ;8   = ler.MyCl-    ;@   = ickFoo_T-    ;H   = )       -    ;I   =A5    ;
=L   A~ =go.string."*handler.MyClickNew_T" -    ;==    D-    ;   =   A-    ;   = *handler-    ;   = .MyClick-    ;   = New_T   -    ;   =A5    ;
=    A~ =go.string."handler.MyClickNew_T" -    ;==    D-    ;   =   A-    ;   = handler.-    ;   = MyClickN-    ;   = ew_T    -    ;   =A5    ;
=    A~ =go.string."Val1" -    ;==    D-    ;   =   A-    ;   = Val1    -    ;   =A5    ;
=   A~ =go.string."MyClickNew_T" -    ;==    D-    ;   =   A-    ;   = MyClickN-    ;   = ew_T    -    ;   =A5    ;
=   A~ =go.string."func(*handler.Functions, templates.Context, handler.MyClickNew_T)" -    ;==    D-    ;   =A   A-    ;   = func(*ha-    ;   = ndler.Fu-    ;   = nctions,-    ;    =  templat-    ;(   = es.Conte-    ;0   = xt, hand-    ;8   = ler.MyCl-    ;@   = ickNew_T-    ;H   = )       -    ;I   =A5    ;
=L   A~ =go.string."func(*handler.Functions, templates.Context, *templates.Item)" -    ;==    D-    ;   =<   A-    ;   = func(*ha-    ;   = ndler.Fu-    ;   = nctions,-    ;    =  templat-    ;(   = es.Conte-    ;0   = xt, *tem-    ;8   = plates.I-    ;@   = tem)    -    ;D   =A5    ;
=H   A~ =go.string."MyClick" -    ;==    D-    ;   =   A-    ;   = MyClick -    ;   =A5    ;
=   A~ =go.string."func(templates.Context, handler.MyClick_T)" -    ;==    D-    ;   =*   A-    ;   = func(tem-    ;   = plates.C-    ;   = ontext, -    ;    = handler.-    ;(   = MyClick_-    ;0   = T)      -    ;2   =A5    ;
=4   A~ =go.string."MyClickFoo" -    ;==    D-    ;   =
   A-    ;   = MyClickF-    ;   = oo      -    ;   =A5    ;
=   A~ =go.string."func(templates.Context, handler.MyClickFoo_T)" -    ;==    D-    ;   =-   A-    ;   = func(tem-    ;   = plates.C-    ;   = ontext, -    ;    = handler.-    ;(   = MyClickF-    ;0   = oo_T)   -    ;5   =A5    ;
=8   A~ =go.string."MyClickNew" -    ;==    D-    ;   =
   A-    ;   = MyClickN-    ;   = ew      -    ;   =A5    ;
=   A~ =go.string."func(templates.Context, handler.MyClickNew_T)" -    ;==    D-    ;   =-   A-    ;   = func(tem-    ;   = plates.C-    ;   = ontext, -    ;    = handler.-    ;(   = MyClickN-    ;0   = ew_T)   -    ;5   =A5    ;
=8   A~ =go.string."Root" -    ;==    D-    ;   =   A-    ;   = Root    -    ;   =A5    ;
=   A~ =go.string."func(templates.Context, *templates.Item)" -    ;==    D-    ;   =(   A-    ;   = func(tem-    ;   = plates.C-    ;   = ontext, -    ;    = *templat-    ;(   = es.Item)-    ;0   =A5    ;
=4   A~ =go.string."handler.Functions" -    ;==    D-    ;   =   A-    ;   = handler.-    ;   = Function-    ;   = s       -    ;   =A5    ;
=   A~ = go.string."func(handler.Functions, templates.Context, handler.MyClick_T)" -    ; ==     D-    ;    ==   A-    ;    = func(han-    ;    = dler.Fun-    ;    = ctions, -    ;     = template-    ;(    = s.Contex-    ;0    = t, handl-    ;8    = er.MyCli-    ;@    = ck_T)   -    ;E    =A5    ;
 =H   A~ =!go.string."func(handler.Functions, templates.Context, handler.MyClickFoo_T)" -    ;!==    !D-    ;   !=@   A-    ;   != func(han-    ;   != dler.Fun-    ;   != ctions, -    ;    != template-    ;(   != s.Contex-    ;0   != t, handl-    ;8   != er.MyCli-    ;@   != ckFoo_T)-    ;H   !=A5    ;
!=L   A~ ="go.string."func(handler.Functions, templates.Context, *templates.Item)" -    ;"==    "D-    ;   "=;   A-    ;   "= func(han-    ;   "= dler.Fun-    ;   "= ctions, -    ;    "= template-    ;(   "= s.Contex-    ;0   "= t, *temp-    ;8   "= lates.It-    ;@   "= em)     -    ;C   "=A5    ;
"=D   A~ =#go.string."Functions" -    ;#==    #D-    ;   #=	   A-    ;   #= Function-    ;   #= s       -    ;   #=A5    ;
#=   A~ =$go.string."func(handler.Functions, templates.Context, handler.MyClickNew_T)" -    ;$==    $D-    ;   $=@   A-    ;   $= func(han-    ;   $= dler.Fun-    ;   $= ctions, -    ;    $= template-    ;(   $= s.Contex-    ;0   $= t, handl-    ;8   $= er.MyCli-    ;@   $= ckNew_T)-    ;H   $=A5    ;
$=L   A~ =%go.string."method(f handler.Functions)func(templates.Context, *templates.Item)" -    ;%==    %D-    ;   %=C   A-    ;   %= method(f-    ;   %=  handler-    ;   %= .Functio-    ;    %= ns)func(-    ;(   %= template-    ;0   %= s.Contex-    ;8   %= t, *temp-    ;@   %= lates.It-    ;H   %= em)     -    ;K   %=A5    ;
%=L   A~ =&go.string."func(*templates.Writer, string) *templates.Test_T" -    ;&==    &D-    ;   &=1   A-    ;   &= func(*te-    ;   &= mplates.-    ;   &= Writer, -    ;    &= string) -    ;(   &= *templat-    ;0   &= es.Test_-    ;8   &= T       -    ;9   &=A5    ;
&=<   A~ ='go.string."[]interface { }" -    ;'==    'D-    ;   '=   A-    ;   '= []interf-    ;   '= ace { } -    ;   '=A5    ;
'=   A~ =(go.string."[1]interface { }" -    ;(==    (D-    ;   (=   A-    ;   (= [1]inter-    ;   (= face { }-    ;   (=A5    ;
(=   A~ =)go.string."*[1]interface { }" -    ;)==    )D-    ;   )=   A-    ;   )= *[1]inte-    ;   )= rface { -    ;   )= }       -    ;   )=A5    ;
)=   A~ =*go.string."func(int32) *[1]interface { }" -    ;*==    *D-    ;   *=   A-    ;   *= func(int-    ;   *= 32) *[1]-    ;   *= interfac-    ;    *= e { }   -    ;%   *=A5    ;
*=(   A~ =+go.string."func(*uint8, *templates.Test_T) interface { }" -    ;+==    +D-    ;   +=-   A-    ;   += func(*ui-    ;   += nt8, *te-    ;   += mplates.-    ;    += Test_T) -    ;(   += interfac-    ;0   += e { }   -    ;5   +=A5    ;
+=8   A~ =,go.string."func(*uint8, string) interface { }" -    ;,==    ,D-    ;   ,="   A-    ;   ,= func(*ui-    ;   ,= nt8, str-    ;   ,= ing) int-    ;    ,= erface {-    ;(   ,=  }      -    ;*   ,=A5    ;
,=,   A~ =-go.string."func(*templates.Writer, string) *templates.Inner_T" -    ;-==    -D-    ;   -=2   A-    ;   -= func(*te-    ;   -= mplates.-    ;   -= Writer, -    ;    -= string) -    ;(   -= *templat-    ;0   -= es.Inner-    ;8   -= _T      -    ;:   -=A5    ;
-=<   A~ =.go.string."func(*uint8, *templates.Inner_T) interface { }" -    ;.==    .D-    ;   .=.   A-    ;   .= func(*ui-    ;   .= nt8, *te-    ;   .= mplates.-    ;    .= Inner_T)-    ;(   .=  interfa-    ;0   .= ce { }  -    ;6   .=A5    ;
.=8   A~ =/go.string."func(*uint8, int) interface { }" -    ;/==    /D-    ;   /=   A-    ;   /= func(*ui-    ;   /= nt8, int-    ;   /= ) interf-    ;    /= ace { } -    ;'   /=A5    ;
/=(   A~ =0go.string."func(*uint8, func(handler.Functions, templates.Context, handler.MyClickNew_T)) interface { }" -    ;0==    0D-    ;   0=\   A-    ;   0= func(*ui-    ;   0= nt8, fun-    ;   0= c(handle-    ;    0= r.Functi-    ;(   0= ons, tem-    ;0   0= plates.C-    ;8   0= ontext, -    ;@   0= handler.-    ;H   0= MyClickN-    ;P   0= ew_T)) i-    ;X   0= nterface-    ;`   0=  { }    -    ;d   0=A5    ;
0=h   A~ =1go.string."func(*uint8, handler.MyClickNew_T) interface { }" -    ;1==    1D-    ;   1=0   A-    ;   1= func(*ui-    ;   1= nt8, han-    ;   1= dler.MyC-    ;    1= lickNew_-    ;(   1= T) inter-    ;0   1= face { }-    ;8   1=A5    ;
1=<   A~ =go.string."method(f handler.Functions)func(templates.Context, handler.MyClickNew_T)" -    ;==    D-    ;   =H   A-    ;   = method(f-    ;   =  handler-    ;   = .Functio-    ;    = ns)func(-    ;(   = template-    ;0   = s.Contex-    ;8   = t, handl-    ;@   = er.MyCli-    ;H   = ckNew_T)-    ;P   =A5    ;
=T   A~ =go.string."func(int, string, string) string" -    ;==    D-    ;   =    A-    ;   = func(int-    ;   = , string-    ;   = , string-    ;    = ) string-    ;(   =A5    ;
=,   A~ =go.string."func(*uint8, templates.Value) interface { }" -    ;==    D-    ;   =+   A-    ;   = func(*ui-    ;   = nt8, tem-    ;   = plates.V-    ;    = alue) in-    ;(   = terface -    ;0   = { }     -    ;3   =A5    ;
=4   A~ =go.string."method(f handler.Functions)func(templates.Context, handler.MyClick_T)" -    ;==    D-    ;   =E   A-    ;   = method(f-    ;   =  handler-    ;   = .Functio-    ;    = ns)func(-    ;(   = template-    ;0   = s.Contex-    ;8   = t, handl-    ;@   = er.MyCli-    ;H   = ck_T)   -    ;M   =A5    ;
=P   A~ =go.string."method(f handler.Functions)func(templates.Context, handler.MyClickFoo_T)" -    ;==    D-    ;   =H   A-    ;   = method(f-    ;   =  handler-    ;   = .Functio-    ;    = ns)func(-    ;(   = template-    ;0   = s.Contex-    ;8   = t, handl-    ;@   = er.MyCli-    ;H   = ckFoo_T)-    ;P   =A5    ;
=T   A~ =go.string."func(*uint8, handler.Functions) interface { }" -    ;==    D-    ;   =-   A-    ;   = func(*ui-    ;   = nt8, han-    ;   = dler.Fun-    ;    = ctions) -    ;(   = interfac-    ;0   = e { }   -    ;5   =A5    ;
=8   A~ =go.string."runtime" -    ;==    D-    ;   =   A-    ;   = runtime -    ;   =A5    ;
=   A~ =go.string."templates" -    ;==    D-    ;   =	   A-    ;   = template-    ;   = s       -    ;   =A5    ;
=   A~ =	go.string."http" -    ;	==    	D-    ;   	=   A-    ;   	= http    -    ;   	=A5    ;
	=   AM      